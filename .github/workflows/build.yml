name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        arch: [aarch64, armv7a, x86_64, i686]
        include:
          - arch: aarch64
            compiler: aarch64-linux-android21-clang
            host: aarch64-linux-android
            output_name: bc-arm64-v8a
          - arch: armv7a
            compiler: armv7a-linux-androideabi21-clang
            host: arm-linux-androideabi
            output_name: bc-armeabi-v7a
          - arch: x86_64
            compiler: x86_64-linux-android21-clang
            host: x86_64-linux-android
            output_name: bc-x86_64
          - arch: i686
            compiler: i686-linux-android21-clang
            host: i686-linux-android
            output_name: bc-x86

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool bison flex texinfo

      - name: Install Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: true
      
      - name: Download and extract BC source
        run: |
          wget https://ftp.wayne.edu/gnu/bc/bc-1.08.1.tar.xz
          tar -xf bc-1.08.1.tar.xz
          cd bc-1.08.1
          
          # Apply patching if needed for Android compatibility
          # (No patches needed for this version, but would go here)
      
      - name: Configure and Build BC for ${{ matrix.arch }}
        run: |
          cd bc-1.08.1
          
          # Set up environment variables
          export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export PATH=$TOOLCHAIN/bin:$PATH
          
          # Create necessary symlinks for toolchain compatibility
          case "${{ matrix.arch }}" in
            aarch64)
              sudo ln -sf $TOOLCHAIN/bin/aarch64-linux-android21-clang $TOOLCHAIN/bin/aarch64-linux-android-gcc
              ;;
            armv7a)
              sudo ln -sf $TOOLCHAIN/bin/armv7a-linux-androideabi21-clang $TOOLCHAIN/bin/arm-linux-androideabi-gcc
              ;;
            x86_64)
              sudo ln -sf $TOOLCHAIN/bin/x86_64-linux-android21-clang $TOOLCHAIN/bin/x86_64-linux-android-gcc
              ;;
            i686)
              sudo ln -sf $TOOLCHAIN/bin/i686-linux-android21-clang $TOOLCHAIN/bin/i686-linux-android-gcc
              ;;
          esac
          
          # Set compiler flags for optimization
          export CFLAGS="-Os -ffunction-sections -fdata-sections -fomit-frame-pointer -flto -DANDROID -D__ANDROID_API__=21"
          export LDFLAGS="-Wl,--gc-sections -flto"
          
          # Run autoconf to generate configure script
          autoreconf -fi
          
          # Configure with appropriate host target and compiler
          ./configure --host=${{ matrix.host }} --prefix=/usr --with-readline=no --disable-nls
          
          # Build
          make -j$(nproc)
          
          $TOOLCHAIN/bin/llvm-strip --strip-all bc/bc
          
          # Check binary size
          ls -lh bc/bc
          
          # Create output directory
          mkdir -p ../output
          cp bc/bc ../output/${{ matrix.output_name }}
      
      - name: Upload BC binary for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: bc-${{ matrix.arch }}-binary
          path: output/${{ matrix.output_name }}
          
  package:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp_binaries
          
      - name: Get short commit SHA
        id: get_commit
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        
      - name: Setup repository structure
        run: |
          # Create bc directory at the root of the repo
          mkdir -p bc
          
          # Copy binaries with their correct names to the bc folder
          cp temp_binaries/bc-aarch64-binary/bc-arm64-v8a bc/
          cp temp_binaries/bc-armv7a-binary/bc-armeabi-v7a bc/
          cp temp_binaries/bc-x86_64-binary/bc-x86_64 bc/
          cp temp_binaries/bc-i686-binary/bc-x86 bc/
          
          # Make binaries executable
          chmod +x bc/*
          
          # Update module.prop version string
          if [ -f module.prop ]; then
            # Update version with gh-actions-{commit}
            sed -i "s/^version=.*/version=gh-actions-${{ steps.get_commit.outputs.SHORT_SHA }}/" module.prop
            
            # Remove updateJson line if present
            sed -i '/^updateJson=/d' module.prop
            
            echo "MODULE_VERSION=gh-actions-${{ steps.get_commit.outputs.SHORT_SHA }}" >> $GITHUB_ENV
          else
            echo "Note: module.prop not found, continuing without updating version."
          fi
          
          # Remove .github folder from output
          rm -rf .github
          
          # List contents for verification
          echo "Repository contents:"
          find . -type f -not -path "./.git/*" | sort
          
          echo "Contents of bc directory:"
          ls -la bc/
          
          if [ -f module.prop ]; then
            echo "Contents of module.prop:"
            cat module.prop
          fi
      
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: partition-backup-${{ steps.get_commit.outputs.SHORT_SHA }}
          path: |
            ./*
            !./.git/
            !./.github/
          if-no-files-found: error
